package sbercode

# 1 ---------------------------------------------------------------------------------------


# 2 ---------------------------------------------------------------------------------------


# 3 ---------------------------------------------------------------------------------------


# 4 ---------------------------------------------------------------------------------------


# 5 ---------------------------------------------------------------------------------------

# правило на успешный запуск кубера и ингрес контроллера
allow[msg] { 
  # есть ли вообще массив controllerStatus.items c количеством элементов 1
  count(input.controllerStatus.items) == 1
  # есть ли вообще массив controllerStatus.items[0].conditions c количеством элементов 4
  count(input.controllerStatus.items[0].status.conditions) == 4
  # проверяем статус запуска контейнера ингрес контроллра
  input.controllerStatus.items[0].status.conditions[_].status = "True"

  msg := "Поздравляем, похоже, что вы успешно инициализировали Kubernetes и Ingress контроллер"
}


# правило на отсуствие признаков запуска кубера и ингрес контролера
deny[msg] { 
  count(input.controllerStatus.items) == 0
  msg := "К сожалению, мы не смогли найти следов запуска вами Kubernetes и Ingress контроллера (см первый шаг упражнения и команду prepare.sh)"
}

# 6 ---------------------------------------------------------------------------------------

# ошибка, если запрос к kubectl свалился с ошибкой
error[msg] {                                      
  input.controllerStatus.error
  msg := sprintf("невозможно завершить упражнение, обратитесь в поддержку или к автору курса: %s", [input.controllerStatus.error])
}


# ошибка, неожиданное состояние кластерв
error[msg] {                                      
  count(input.controllerStatus.items) > 1
  msg := sprintf("невозможно завершить упражнение, обратитесь в поддержку или к автору курса, неожиданное состояние кластера кубера: %v", [input.controllerStatus])  
}

# ошибка, неожиданное состояние кластерв
error[msg] {                                      
  count(input.controllerStatus.items) == 1
  not(input.controllerStatus.items[0].status)
  msg := sprintf("невозможно завершить упражнение, обратитесь в поддержку или к автору курса, неожиданное состояние кластера кубера: %v", [input.controllerStatus])  
}


# общее правило на непредвиденную ошибку
error[msg] {                                                                                                           
  msg := input.error
}
